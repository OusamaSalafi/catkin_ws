# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrpt_msgs/GraphConstraint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GraphConstraint(genpy.Message):
  _md5sum = "27a8223828dcd501cdc97873eecdd09e"
  _type = "mrpt_msgs/GraphConstraint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Graph constraint that connects 2 nodes
#
# Currently used in the mrpt_graphslam_2d ROS application.

uint64 nodeID_from
uint64 nodeID_to
geometry_msgs/PoseWithCovariance constraint

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['nodeID_from','nodeID_to','constraint']
  _slot_types = ['uint64','uint64','geometry_msgs/PoseWithCovariance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nodeID_from,nodeID_to,constraint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphConstraint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodeID_from is None:
        self.nodeID_from = 0
      if self.nodeID_to is None:
        self.nodeID_to = 0
      if self.constraint is None:
        self.constraint = geometry_msgs.msg.PoseWithCovariance()
    else:
      self.nodeID_from = 0
      self.nodeID_to = 0
      self.constraint = geometry_msgs.msg.PoseWithCovariance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Q7d().pack(_x.nodeID_from, _x.nodeID_to, _x.constraint.pose.position.x, _x.constraint.pose.position.y, _x.constraint.pose.position.z, _x.constraint.pose.orientation.x, _x.constraint.pose.orientation.y, _x.constraint.pose.orientation.z, _x.constraint.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.constraint.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.constraint is None:
        self.constraint = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.nodeID_from, _x.nodeID_to, _x.constraint.pose.position.x, _x.constraint.pose.position.y, _x.constraint.pose.position.z, _x.constraint.pose.orientation.x, _x.constraint.pose.orientation.y, _x.constraint.pose.orientation.z, _x.constraint.pose.orientation.w,) = _get_struct_2Q7d().unpack(str[start:end])
      start = end
      end += 288
      self.constraint.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Q7d().pack(_x.nodeID_from, _x.nodeID_to, _x.constraint.pose.position.x, _x.constraint.pose.position.y, _x.constraint.pose.position.z, _x.constraint.pose.orientation.x, _x.constraint.pose.orientation.y, _x.constraint.pose.orientation.z, _x.constraint.pose.orientation.w))
      buff.write(self.constraint.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.constraint is None:
        self.constraint = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.nodeID_from, _x.nodeID_to, _x.constraint.pose.position.x, _x.constraint.pose.position.y, _x.constraint.pose.position.z, _x.constraint.pose.orientation.x, _x.constraint.pose.orientation.y, _x.constraint.pose.orientation.z, _x.constraint.pose.orientation.w,) = _get_struct_2Q7d().unpack(str[start:end])
      start = end
      end += 288
      self.constraint.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_2Q7d = None
def _get_struct_2Q7d():
    global _struct_2Q7d
    if _struct_2Q7d is None:
        _struct_2Q7d = struct.Struct("<2Q7d")
    return _struct_2Q7d
