# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrpt_msgs/GraphSlamAgent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class GraphSlamAgent(genpy.Message):
  _md5sum = "6f5305e3be2b2f63220c0183a8af1288"
  _type = "mrpt_msgs/GraphSlamAgent"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Connection-related properties for a graphSLAM agent in a multi-robot
# environment.
#
# Currently used in the mrpt_graphslam_2d ROS application.

std_msgs/String name
std_msgs/String hostname

# IPv4 of the corresponding agent
std_msgs/String ip_addr

# Port that the the roscore of the corresponding agent is running under
uint16 port

# True if the SLAM Agent was last reported to be online
std_msgs/Bool is_online

# Timestamp that the SLAM Agent was last seen
std_msgs/Time last_seen_time

# ROS Topics namespace that the agent is running under
# By definition this is going to be the same as the *name*
# UPDATE: Previously the topics namespace was <name>_<agent_ID>. However since I'll be using the multimaster for communication, every node is going to have a different 
std_msgs/String topic_namespace

# this is the last field of the IPv4 address of the corresponding agent
# e.g. IP=192.168.100.17
# agent_ID = 17
int32 agent_ID 

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/Time
time data
"""
  __slots__ = ['name','hostname','ip_addr','port','is_online','last_seen_time','topic_namespace','agent_ID']
  _slot_types = ['std_msgs/String','std_msgs/String','std_msgs/String','uint16','std_msgs/Bool','std_msgs/Time','std_msgs/String','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,hostname,ip_addr,port,is_online,last_seen_time,topic_namespace,agent_ID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphSlamAgent, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.hostname is None:
        self.hostname = std_msgs.msg.String()
      if self.ip_addr is None:
        self.ip_addr = std_msgs.msg.String()
      if self.port is None:
        self.port = 0
      if self.is_online is None:
        self.is_online = std_msgs.msg.Bool()
      if self.last_seen_time is None:
        self.last_seen_time = std_msgs.msg.Time()
      if self.topic_namespace is None:
        self.topic_namespace = std_msgs.msg.String()
      if self.agent_ID is None:
        self.agent_ID = 0
    else:
      self.name = std_msgs.msg.String()
      self.hostname = std_msgs.msg.String()
      self.ip_addr = std_msgs.msg.String()
      self.port = 0
      self.is_online = std_msgs.msg.Bool()
      self.last_seen_time = std_msgs.msg.Time()
      self.topic_namespace = std_msgs.msg.String()
      self.agent_ID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.hostname.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ip_addr.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_HB2I().pack(_x.port, _x.is_online.data, _x.last_seen_time.data.secs, _x.last_seen_time.data.nsecs))
      _x = self.topic_namespace.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.agent_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.hostname is None:
        self.hostname = std_msgs.msg.String()
      if self.ip_addr is None:
        self.ip_addr = std_msgs.msg.String()
      if self.is_online is None:
        self.is_online = std_msgs.msg.Bool()
      if self.last_seen_time is None:
        self.last_seen_time = std_msgs.msg.Time()
      if self.topic_namespace is None:
        self.topic_namespace = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hostname.data = str[start:end].decode('utf-8')
      else:
        self.hostname.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip_addr.data = str[start:end].decode('utf-8')
      else:
        self.ip_addr.data = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.port, _x.is_online.data, _x.last_seen_time.data.secs, _x.last_seen_time.data.nsecs,) = _get_struct_HB2I().unpack(str[start:end])
      self.is_online.data = bool(self.is_online.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_namespace.data = str[start:end].decode('utf-8')
      else:
        self.topic_namespace.data = str[start:end]
      start = end
      end += 4
      (self.agent_ID,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.hostname.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.ip_addr.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_HB2I().pack(_x.port, _x.is_online.data, _x.last_seen_time.data.secs, _x.last_seen_time.data.nsecs))
      _x = self.topic_namespace.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.agent_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.hostname is None:
        self.hostname = std_msgs.msg.String()
      if self.ip_addr is None:
        self.ip_addr = std_msgs.msg.String()
      if self.is_online is None:
        self.is_online = std_msgs.msg.Bool()
      if self.last_seen_time is None:
        self.last_seen_time = std_msgs.msg.Time()
      if self.topic_namespace is None:
        self.topic_namespace = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hostname.data = str[start:end].decode('utf-8')
      else:
        self.hostname.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip_addr.data = str[start:end].decode('utf-8')
      else:
        self.ip_addr.data = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.port, _x.is_online.data, _x.last_seen_time.data.secs, _x.last_seen_time.data.nsecs,) = _get_struct_HB2I().unpack(str[start:end])
      self.is_online.data = bool(self.is_online.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic_namespace.data = str[start:end].decode('utf-8')
      else:
        self.topic_namespace.data = str[start:end]
      start = end
      end += 4
      (self.agent_ID,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_HB2I = None
def _get_struct_HB2I():
    global _struct_HB2I
    if _struct_HB2I is None:
        _struct_HB2I = struct.Struct("<HB2I")
    return _struct_HB2I
