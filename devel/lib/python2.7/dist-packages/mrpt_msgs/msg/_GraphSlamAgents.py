# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrpt_msgs/GraphSlamAgents.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mrpt_msgs.msg
import std_msgs.msg

class GraphSlamAgents(genpy.Message):
  _md5sum = "ac3446e50a170e19b88734cb8e7206bb"
  _type = "mrpt_msgs/GraphSlamAgents"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Defines vector of GraphSlamAgents.
# Currently used in the mrpt_graphslam_2d ROS application.

GraphSlamAgent[] list


================================================================================
MSG: mrpt_msgs/GraphSlamAgent
# Connection-related properties for a graphSLAM agent in a multi-robot
# environment.
#
# Currently used in the mrpt_graphslam_2d ROS application.

std_msgs/String name
std_msgs/String hostname

# IPv4 of the corresponding agent
std_msgs/String ip_addr

# Port that the the roscore of the corresponding agent is running under
uint16 port

# True if the SLAM Agent was last reported to be online
std_msgs/Bool is_online

# Timestamp that the SLAM Agent was last seen
std_msgs/Time last_seen_time

# ROS Topics namespace that the agent is running under
# By definition this is going to be the same as the *name*
# UPDATE: Previously the topics namespace was <name>_<agent_ID>. However since I'll be using the multimaster for communication, every node is going to have a different 
std_msgs/String topic_namespace

# this is the last field of the IPv4 address of the corresponding agent
# e.g. IP=192.168.100.17
# agent_ID = 17
int32 agent_ID 

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/Time
time data
"""
  __slots__ = ['list']
  _slot_types = ['mrpt_msgs/GraphSlamAgent[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphSlamAgents, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.list is None:
        self.list = []
    else:
      self.list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list:
        _v1 = val1.name
        _x = _v1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.hostname
        _x = _v2.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.ip_addr
        _x = _v3.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(val1.port))
        _v4 = val1.is_online
        buff.write(_get_struct_B().pack(_v4.data))
        _v5 = val1.last_seen_time
        _v6 = _v5.data
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v7 = val1.topic_namespace
        _x = _v7.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.agent_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.list is None:
        self.list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.GraphSlamAgent()
        _v8 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.data = str[start:end].decode('utf-8')
        else:
          _v8.data = str[start:end]
        _v9 = val1.hostname
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.data = str[start:end].decode('utf-8')
        else:
          _v9.data = str[start:end]
        _v10 = val1.ip_addr
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.data = str[start:end].decode('utf-8')
        else:
          _v10.data = str[start:end]
        start = end
        end += 2
        (val1.port,) = _get_struct_H().unpack(str[start:end])
        _v11 = val1.is_online
        start = end
        end += 1
        (_v11.data,) = _get_struct_B().unpack(str[start:end])
        _v11.data = bool(_v11.data)
        _v12 = val1.last_seen_time
        _v13 = _v12.data
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v14 = val1.topic_namespace
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.data = str[start:end].decode('utf-8')
        else:
          _v14.data = str[start:end]
        start = end
        end += 4
        (val1.agent_ID,) = _get_struct_i().unpack(str[start:end])
        self.list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list:
        _v15 = val1.name
        _x = _v15.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = val1.hostname
        _x = _v16.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v17 = val1.ip_addr
        _x = _v17.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_H().pack(val1.port))
        _v18 = val1.is_online
        buff.write(_get_struct_B().pack(_v18.data))
        _v19 = val1.last_seen_time
        _v20 = _v19.data
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v21 = val1.topic_namespace
        _x = _v21.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_i().pack(val1.agent_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.list is None:
        self.list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.GraphSlamAgent()
        _v22 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.data = str[start:end].decode('utf-8')
        else:
          _v22.data = str[start:end]
        _v23 = val1.hostname
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v23.data = str[start:end].decode('utf-8')
        else:
          _v23.data = str[start:end]
        _v24 = val1.ip_addr
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.data = str[start:end].decode('utf-8')
        else:
          _v24.data = str[start:end]
        start = end
        end += 2
        (val1.port,) = _get_struct_H().unpack(str[start:end])
        _v25 = val1.is_online
        start = end
        end += 1
        (_v25.data,) = _get_struct_B().unpack(str[start:end])
        _v25.data = bool(_v25.data)
        _v26 = val1.last_seen_time
        _v27 = _v26.data
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v28 = val1.topic_namespace
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.data = str[start:end].decode('utf-8')
        else:
          _v28.data = str[start:end]
        start = end
        end += 4
        (val1.agent_ID,) = _get_struct_i().unpack(str[start:end])
        self.list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
