# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrpt_msgs/NetworkOfPoses.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrpt_msgs.msg
import std_msgs.msg

class NetworkOfPoses(genpy.Message):
  _md5sum = "2f7e17a78e81d376b3e999d635df4228"
  _type = "mrpt_msgs/NetworkOfPoses"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Represents a 2D/3D Directed Graph of Constraints
#
# Graph consists of:
# - NodeIDs with their corresponding poses
# - Directed Constraints that connect 2 nodes with each other
# - Root node marking the start of the graph

uint64 root
NodeIDWithPose_vec nodes
GraphConstraint[] constraints

================================================================================
MSG: mrpt_msgs/NodeIDWithPose_vec
# Vector of NodeIDWithPose msgs

NodeIDWithPose[] vec


================================================================================
MSG: mrpt_msgs/NodeIDWithPose
# NodeID along with its corresponding 2D/3D pose estimation.
# Message also contains the following optional fields:
# - str_ID: string identifier of the robot agent that initially registered this node in
# its graph
# - nodeID_loc: ID of the current node in the graph it was initially registered in.
#
# note: Additional fields correspond to the fields of the
# mrpt::graphs::detail::TMRSlamNodeAnnotations struct
#
# Currently used in the mrpt_graphslam_2d ROS application.

uint64 nodeID
geometry_msgs/Pose pose

std_msgs/String str_ID
uint64 nodeID_loc

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: mrpt_msgs/GraphConstraint
# Graph constraint that connects 2 nodes
#
# Currently used in the mrpt_graphslam_2d ROS application.

uint64 nodeID_from
uint64 nodeID_to
geometry_msgs/PoseWithCovariance constraint

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance
"""
  __slots__ = ['root','nodes','constraints']
  _slot_types = ['uint64','mrpt_msgs/NodeIDWithPose_vec','mrpt_msgs/GraphConstraint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       root,nodes,constraints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NetworkOfPoses, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.root is None:
        self.root = 0
      if self.nodes is None:
        self.nodes = mrpt_msgs.msg.NodeIDWithPose_vec()
      if self.constraints is None:
        self.constraints = []
    else:
      self.root = 0
      self.nodes = mrpt_msgs.msg.NodeIDWithPose_vec()
      self.constraints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_Q().pack(self.root))
      length = len(self.nodes.vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes.vec:
        buff.write(_get_struct_Q().pack(val1.nodeID))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.str_ID
        _x = _v4.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_Q().pack(val1.nodeID_loc))
      length = len(self.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.nodeID_from, _x.nodeID_to))
        _v5 = val1.constraint
        _v6 = _v5.pose
        _v7 = _v6.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = _v6.orientation
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v5.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.nodes is None:
        self.nodes = mrpt_msgs.msg.NodeIDWithPose_vec()
      if self.constraints is None:
        self.constraints = None
      end = 0
      start = end
      end += 8
      (self.root,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes.vec = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.NodeIDWithPose()
        start = end
        end += 8
        (val1.nodeID,) = _get_struct_Q().unpack(str[start:end])
        _v9 = val1.pose
        _v10 = _v9.position
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = _v9.orientation
        _x = _v11
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v12 = val1.str_ID
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.data = str[start:end].decode('utf-8')
        else:
          _v12.data = str[start:end]
        start = end
        end += 8
        (val1.nodeID_loc,) = _get_struct_Q().unpack(str[start:end])
        self.nodes.vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.GraphConstraint()
        _x = val1
        start = end
        end += 16
        (_x.nodeID_from, _x.nodeID_to,) = _get_struct_2Q().unpack(str[start:end])
        _v13 = val1.constraint
        _v14 = _v13.pose
        _v15 = _v14.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = _v14.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v13.covariance = _get_struct_36d().unpack(str[start:end])
        self.constraints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_Q().pack(self.root))
      length = len(self.nodes.vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.nodes.vec:
        buff.write(_get_struct_Q().pack(val1.nodeID))
        _v17 = val1.pose
        _v18 = _v17.position
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = _v17.orientation
        _x = _v19
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v20 = val1.str_ID
        _x = _v20.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_Q().pack(val1.nodeID_loc))
      length = len(self.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints:
        _x = val1
        buff.write(_get_struct_2Q().pack(_x.nodeID_from, _x.nodeID_to))
        _v21 = val1.constraint
        _v22 = _v21.pose
        _v23 = _v22.position
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.orientation
        _x = _v24
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v21.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.nodes is None:
        self.nodes = mrpt_msgs.msg.NodeIDWithPose_vec()
      if self.constraints is None:
        self.constraints = None
      end = 0
      start = end
      end += 8
      (self.root,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.nodes.vec = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.NodeIDWithPose()
        start = end
        end += 8
        (val1.nodeID,) = _get_struct_Q().unpack(str[start:end])
        _v25 = val1.pose
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v28 = val1.str_ID
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.data = str[start:end].decode('utf-8')
        else:
          _v28.data = str[start:end]
        start = end
        end += 8
        (val1.nodeID_loc,) = _get_struct_Q().unpack(str[start:end])
        self.nodes.vec.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.GraphConstraint()
        _x = val1
        start = end
        end += 16
        (_x.nodeID_from, _x.nodeID_to,) = _get_struct_2Q().unpack(str[start:end])
        _v29 = val1.constraint
        _v30 = _v29.pose
        _v31 = _v30.position
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = _v30.orientation
        _x = _v32
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v29.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        self.constraints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
