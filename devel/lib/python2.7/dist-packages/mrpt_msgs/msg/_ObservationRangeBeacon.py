# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrpt_msgs/ObservationRangeBeacon.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrpt_msgs.msg
import std_msgs.msg

class ObservationRangeBeacon(genpy.Message):
  _md5sum = "94cf8974a1eec8843e3b69c87cc25d62"
  _type = "mrpt_msgs/ObservationRangeBeacon"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message holds an observation of one or more landmarks 
#  detected by their range (distance) 
#  from some sensor on the robot.

# Time of sensor data acquisition, coordinate frame ID.
Header header

# The sensor pose on the robot coordinates frame.
geometry_msgs/Pose sensor_pose_on_robot

# Sensor characteristics:
float64 min_sensor_distance   # In meters (m)
float64 max_sensor_distance   # (m)

# Typical sensor noise:
float64 sensor_std_range      # (m)

# The vector of individual observations
SingleRangeBeaconObservation[] sensed_data



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: mrpt_msgs/SingleRangeBeaconObservation
#int32 INVALID_LANDMARK_ID = -1


float64  range    # Distance, in meters.
int32    id       # Landmark ID (or INVALID_LANDMARK_ID if landmarks are not identified)

"""
  __slots__ = ['header','sensor_pose_on_robot','min_sensor_distance','max_sensor_distance','sensor_std_range','sensed_data']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','float64','float64','float64','mrpt_msgs/SingleRangeBeaconObservation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensor_pose_on_robot,min_sensor_distance,max_sensor_distance,sensor_std_range,sensed_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObservationRangeBeacon, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_pose_on_robot is None:
        self.sensor_pose_on_robot = geometry_msgs.msg.Pose()
      if self.min_sensor_distance is None:
        self.min_sensor_distance = 0.
      if self.max_sensor_distance is None:
        self.max_sensor_distance = 0.
      if self.sensor_std_range is None:
        self.sensor_std_range = 0.
      if self.sensed_data is None:
        self.sensed_data = []
    else:
      self.header = std_msgs.msg.Header()
      self.sensor_pose_on_robot = geometry_msgs.msg.Pose()
      self.min_sensor_distance = 0.
      self.max_sensor_distance = 0.
      self.sensor_std_range = 0.
      self.sensed_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.sensor_pose_on_robot.position.x, _x.sensor_pose_on_robot.position.y, _x.sensor_pose_on_robot.position.z, _x.sensor_pose_on_robot.orientation.x, _x.sensor_pose_on_robot.orientation.y, _x.sensor_pose_on_robot.orientation.z, _x.sensor_pose_on_robot.orientation.w, _x.min_sensor_distance, _x.max_sensor_distance, _x.sensor_std_range))
      length = len(self.sensed_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensed_data:
        _x = val1
        buff.write(_get_struct_di().pack(_x.range, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_pose_on_robot is None:
        self.sensor_pose_on_robot = geometry_msgs.msg.Pose()
      if self.sensed_data is None:
        self.sensed_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.sensor_pose_on_robot.position.x, _x.sensor_pose_on_robot.position.y, _x.sensor_pose_on_robot.position.z, _x.sensor_pose_on_robot.orientation.x, _x.sensor_pose_on_robot.orientation.y, _x.sensor_pose_on_robot.orientation.z, _x.sensor_pose_on_robot.orientation.w, _x.min_sensor_distance, _x.max_sensor_distance, _x.sensor_std_range,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensed_data = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.SingleRangeBeaconObservation()
        _x = val1
        start = end
        end += 12
        (_x.range, _x.id,) = _get_struct_di().unpack(str[start:end])
        self.sensed_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d().pack(_x.sensor_pose_on_robot.position.x, _x.sensor_pose_on_robot.position.y, _x.sensor_pose_on_robot.position.z, _x.sensor_pose_on_robot.orientation.x, _x.sensor_pose_on_robot.orientation.y, _x.sensor_pose_on_robot.orientation.z, _x.sensor_pose_on_robot.orientation.w, _x.min_sensor_distance, _x.max_sensor_distance, _x.sensor_std_range))
      length = len(self.sensed_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensed_data:
        _x = val1
        buff.write(_get_struct_di().pack(_x.range, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_pose_on_robot is None:
        self.sensor_pose_on_robot = geometry_msgs.msg.Pose()
      if self.sensed_data is None:
        self.sensed_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.sensor_pose_on_robot.position.x, _x.sensor_pose_on_robot.position.y, _x.sensor_pose_on_robot.position.z, _x.sensor_pose_on_robot.orientation.x, _x.sensor_pose_on_robot.orientation.y, _x.sensor_pose_on_robot.orientation.z, _x.sensor_pose_on_robot.orientation.w, _x.min_sensor_distance, _x.max_sensor_distance, _x.sensor_std_range,) = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensed_data = []
      for i in range(0, length):
        val1 = mrpt_msgs.msg.SingleRangeBeaconObservation()
        _x = val1
        start = end
        end += 12
        (_x.range, _x.id,) = _get_struct_di().unpack(str[start:end])
        self.sensed_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_di = None
def _get_struct_di():
    global _struct_di
    if _struct_di is None:
        _struct_di = struct.Struct("<di")
    return _struct_di
